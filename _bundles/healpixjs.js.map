{"version":3,"file":"healpixjs.js","mappings":"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,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG;YAC1E,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG;YAC3E,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI;YAC5E,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI;YAC1E,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI;YAC1E,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI;YAC1E,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI;YAC1E,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI;YAC1E,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI;YAC1E,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI;YAC1E,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI;YAC1E,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI;YAC1E,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI;SAAE,CAAC,CAAC;QACrE,IAAI,CAAC,IAAI,GAAG,IAAI,WAAW,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG;YAC9F,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI;YAC5E,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI;YAC1E,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI;YAC1E,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI;YAC1E,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI;YAC1E,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI;YAC1E,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK;YAC7E,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK;YAC7E,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK;YAC7E,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,E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","sources":["webpack://healpixjs/webpack/universalModuleDefinition","webpack://healpixjs/./src/CircleFinder.ts","webpack://healpixjs/./src/Constants.ts","webpack://healpixjs/./src/Fxyf.ts","webpack://healpixjs/./src/Healpix.ts","webpack://healpixjs/./src/Hploc.ts","webpack://healpixjs/./src/Pointing.ts","webpack://healpixjs/./src/RangeSet.ts","webpack://healpixjs/./src/Vec3.ts","webpack://healpixjs/./src/Xyf.ts","webpack://healpixjs/./src/Zphi.ts","webpack://healpixjs/./src/pstack.ts","webpack://healpixjs/webpack/bootstrap","webpack://healpixjs/webpack/runtime/define property getters","webpack://healpixjs/webpack/runtime/hasOwnProperty shorthand","webpack://healpixjs/webpack/runtime/make namespace object","webpack://healpixjs/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"healpixjs\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"healpixjs\"] = factory();\n\telse\n\t\troot[\"healpixjs\"] = factory();\n})(self, () => {\nreturn ","\nimport {Vec3} from './Vec3.js';\n\n\nexport class CircleFinder{\n\t\n\tcenter;\t// Vec3\n\tcosrad;\t// double\n\t\n/**\n * @param point: Vec3\n */\n\tconstructor(point){\n\t\t\n\t\tlet np = point.length;\n\t    //HealpixUtils.check(np>=2,\"too few points\");\n\t    if (!(np>=2)){\n\t    \tconsole.log(\"too few points\");\n\t    \treturn;\n\t    }\n\t    this.center = point[0].add(point[1]); \n\t    this.center.normalize();\n\t    this.cosrad = point[0].dot(this.center);\n\t    for (let i=2; i<np; ++i){\n\t    \tif (point[i].dot(this.center)<this.cosrad){ // point outside the current circle\n\t\t        this.getCircle(point,i);\t\n\t    \t}\n\t    }\n\t      \n\t};\n\t\n\t/**\n\t * @parm point: Vec3\n\t * @param q: int\n\t */\n\tgetCircle (point, q){\n\t\tthis.center = point[0].add(point[q]); \n\t\tthis.center.normalize();\n\t\tthis.cosrad = point[0].dot(this.center);\n\t\tfor (let i=1; i<q; ++i){\n\t\t\tif (point[i].dot(this.center)<this.cosrad){ // point outside the current circle\n\t\t\t\tthis.getCircle2(point,i,q);\n\t\t\t}\n\t\t}\n    };\n\t\n\t/**\n\t * @parm point: Vec3\n\t * @param q1: int\n\t * @param q2: int\n\t */\n\tgetCircle2 (point, q1, q2){\n\t\tthis.center = point[q1].add(point[q2]); \n\t\tthis.center.normalize();\n\t\tthis.cosrad = point[q1].dot(this.center);\n\t\tfor (let i=0; i<q1; ++i){\n\t\t\tif (point[i].dot(this.center)<this.cosrad){// point outside the current circle\n\t        \n\t\t\t\tthis.center=(point[q1].sub(point[i])).cross(point[q2].sub(point[i]));\n\t\t\t\tthis.center.normalize();\n\t\t\t\tthis.cosrad=point[i].dot(this.center);\n\t\t\t\tif (this.cosrad<0){ \n\t\t\t\t\tthis.center.flip(); \n\t\t\t\t\tthis.cosrad=-this.cosrad; \n\t\t\t\t}\n\t        }\n\t\t}\n    };\n    \n    getCenter() { \n    \treturn new Vec3(this.center.x, this.center.y, this.center.z); \n    }\n    \n    getCosrad() { \n    \treturn this.cosrad; \n    };\n\t\n}\n\n","\n\nexport class Constants{\n  \n  \n//\tstatic halfpi = Math.PI/2.;\n\tstatic halfpi = 1.5707963267948966;\n\t\n\n\tstatic inv_halfpi = 2./Math.PI;\n\t\n\t  /** The Constant twopi. */\n\tstatic twopi = 2*Math.PI;\n\tstatic inv_twopi = 1./(2*Math.PI);\n\n}\n\n","/**\n * Partial porting to Javascript of Fxyf.java from Healpix3.30\n */\n\nimport {Hploc} from './Hploc.js';\nimport {Vec3} from './Vec3.js';\n\nexport class Fxyf{ \n\t\n\tfx: number;\n\tfy: number;\n\tface: number;\n\tjrll: Uint8Array;\n\tjpll: Uint8Array;\n\thalfpi: number;\n\n\tconstructor(x: number, y: number, f: number){\n\t\tthis.fx=x; \n\t\tthis.fy=y; \n\t\tthis.face=f; \n\t\t// coordinate of the lowest corner of each face\n\t\tthis.jrll = new Uint8Array([ 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4 ]);\n\t\tthis.jpll = new Uint8Array([ 1, 3, 5, 7, 0, 2, 4, 6, 1, 3, 5, 7 ]);\n\t\tthis.halfpi = Math.PI/2.;\n\t}\n\n\ttoHploc(): Hploc{\t\n\t\tlet loc = new Hploc();\n\t\t\n\t\tlet jr = this.jrll[this.face] - this.fx - this.fy;\n\t\t\n\t\tlet nr: number;\n\t\n\t\tif (jr<1){\n\t\t\t  nr = jr;\n\t\t\t  let tmp = nr*nr/3.;\n\t\t\t  loc.z = 1 - tmp;\n\t\t\t  if (loc.z > 0.99) { \n\t\t\t\t  loc.sth = Math.sqrt(tmp*(2.0-tmp)); \n\t\t\t\t  loc.have_sth = true; \n\t\t\t  }\n\t\t}else if (jr > 3){\n\t\t\t  nr = 4 - jr;\n\t\t\t  let tmp = nr*nr/3.;\n\t\t\t  loc.z = tmp - 1;\n\t\t\t  if (loc.z <- 0.99) { \n\t\t\t\t  loc.sth = Math.sqrt(tmp*(2.0-tmp)); \n\t\t\t\t  loc.have_sth = true; \n\t\t\t  }\n\t\t}else{\n\t\t\t  nr = 1;\n\t\t\t  loc.z = (2 - jr)*2.0/3.;\n\t\t}\n\t\n\t\tlet tmp = this.jpll[this.face]*nr+this.fx-this.fy;\n\t\tif (tmp < 0) {\n\t\t\ttmp += 8;\n\t\t}\n\t\tif (tmp >= 8) {\n\t\t\ttmp -= 8;\n\t\t}\n\t\tloc.phi = (nr<1e-15) ? 0 : (0.5*this.halfpi*tmp)/nr;\n\t\treturn loc;\n\t};\n\t\n\t\n\ttoVec3(): Vec3{ \n\t\treturn this.toHploc().toVec3(); \n\t};\n}\n\n\n","\"use strict\";\r\n\r\nimport { CircleFinder } from \"./CircleFinder.js\";\r\nimport { Constants } from \"./Constants.js\";\r\nimport { Fxyf } from \"./Fxyf.js\";\r\nimport { Hploc } from \"./Hploc.js\";\r\nimport { Pointing } from \"./Pointing.js\";\r\nimport { pstack } from \"./pstack.js\";\r\nimport { RangeSet } from \"./RangeSet.js\";\r\nimport { Vec3 } from \"./Vec3.js\";\r\nimport { Xyf } from \"./Xyf.js\";\r\nimport { Zphi } from \"./Zphi.js\";\r\n\r\n/**\r\n * Partial porting to Javascript of HealpixBase.java from Healpix3.30\r\n */\r\n\r\n// import Fxyf from './Fxyf.js';\r\n// import Hploc from './Hploc.js';\r\n// import Xyf from './Xyf.js';\r\n// import Vec3 from './Vec3.js';\r\n// import Pointing from './Pointing.js';\r\n// import CircleFinder from './CircleFinder.js';\r\n// import Zphi from './Zphi.js';\r\n// import pstack from './pstack.js';\r\n// import Constants from './Constants.js';\r\n// import RangeSet from './RangeSet.js';\r\n\r\n\r\nexport class Healpix{\r\n\t\r\n\torder_max: number;\r\n    inv_halfpi: number;\r\n    twothird: number;\r\n    ns_max: number;\r\n    ctab: Uint16Array;\r\n    utab: Uint16Array;\r\n    xoffset: Int16Array;\r\n    yoffset: Int16Array;\r\n\r\n    jrll: Int16Array;\r\n    jpll: Int16Array;\r\n\r\n    facearray: Int16Array[];\r\n    swaparray: Int16Array[];\r\n\tnside: number;\r\n    npface: number;\r\n    npix: number;\r\n    order: number;\r\n    nl2: number;\r\n    nl3: number;\r\n    nl4: number;\r\n    fact2: number;\r\n    fact1: number;\r\n    ncap: number; // pixel\r\n    bn: Healpix[];\r\n    mpr: number[];\r\n    cmpr: number[];\r\n    smpr: number[];\r\n\t\r\n    constructor(nside_in: number){\r\n        this.order_max = 29;\r\n        this.inv_halfpi = 2.0/Math.PI;\r\n        this.twothird = 2.0/3.;\r\n    // console.log(\"twothird \"+this.twothird);\r\n        // this.ns_max=1L<<order_max;\r\n        this.ns_max = Math.pow(2, this.order_max);\r\n        this.ctab = new Uint16Array([\r\n                0,1,256,257,2,3,258,259,512,513,768,769,514,515,770,771,4,5,260,261,6,7,262,\r\n              263,516,517,772,773,518,519,774,775,1024,1025,1280,1281,1026,1027,1282,1283,\r\n              1536,1537,1792,1793,1538,1539,1794,1795,1028,1029,1284,1285,1030,1031,1286,\r\n              1287,1540,1541,1796,1797,1542,1543,1798,1799,8,9,264,265,10,11,266,267,520,\r\n              521,776,777,522,523,778,779,12,13,268,269,14,15,270,271,524,525,780,781,526,\r\n              527,782,783,1032,1033,1288,1289,1034,1035,1290,1291,1544,1545,1800,1801,1546,\r\n              1547,1802,1803,1036,1037,1292,1293,1038,1039,1294,1295,1548,1549,1804,1805,\r\n              1550,1551,1806,1807,2048,2049,2304,2305,2050,2051,2306,2307,2560,2561,2816,\r\n              2817,2562,2563,2818,2819,2052,2053,2308,2309,2054,2055,2310,2311,2564,2565,\r\n              2820,2821,2566,2567,2822,2823,3072,3073,3328,3329,3074,3075,3330,3331,3584,\r\n              3585,3840,3841,3586,3587,3842,3843,3076,3077,3332,3333,3078,3079,3334,3335,\r\n              3588,3589,3844,3845,3590,3591,3846,3847,2056,2057,2312,2313,2058,2059,2314,\r\n              2315,2568,2569,2824,2825,2570,2571,2826,2827,2060,2061,2316,2317,2062,2063,\r\n              2318,2319,2572,2573,2828,2829,2574,2575,2830,2831,3080,3081,3336,3337,3082,\r\n              3083,3338,3339,3592,3593,3848,3849,3594,3595,3850,3851,3084,3085,3340,3341,\r\n              3086,3087,3342,3343,3596,3597,3852,3853,3598,3599,3854,3855 ]);\r\n        this.utab = new Uint16Array([0,1,4,5,16,17,20,21,64,65,68,69,80,81,84,85,256,257,260,261,272,273,276,277,\r\n                  320,321,324,325,336,337,340,341,1024,1025,1028,1029,1040,1041,1044,1045,1088,\r\n                  1089,1092,1093,1104,1105,1108,1109,1280,1281,1284,1285,1296,1297,1300,1301,\r\n                  1344,1345,1348,1349,1360,1361,1364,1365,4096,4097,4100,4101,4112,4113,4116,\r\n                  4117,4160,4161,4164,4165,4176,4177,4180,4181,4352,4353,4356,4357,4368,4369,\r\n                  4372,4373,4416,4417,4420,4421,4432,4433,4436,4437,5120,5121,5124,5125,5136,\r\n                  5137,5140,5141,5184,5185,5188,5189,5200,5201,5204,5205,5376,5377,5380,5381,\r\n                  5392,5393,5396,5397,5440,5441,5444,5445,5456,5457,5460,5461,16384,16385,16388,\r\n                  16389,16400,16401,16404,16405,16448,16449,16452,16453,16464,16465,16468,16469,\r\n                  16640,16641,16644,16645,16656,16657,16660,16661,16704,16705,16708,16709,16720,\r\n                  16721,16724,16725,17408,17409,17412,17413,17424,17425,17428,17429,17472,17473,\r\n                  17476,17477,17488,17489,17492,17493,17664,17665,17668,17669,17680,17681,17684,\r\n                  17685,17728,17729,17732,17733,17744,17745,17748,17749,20480,20481,20484,20485,\r\n                  20496,20497,20500,20501,20544,20545,20548,20549,20560,20561,20564,20565,20736,\r\n                  20737,20740,20741,20752,20753,20756,20757,20800,20801,20804,20805,20816,20817,\r\n                  20820,20821,21504,21505,21508,21509,21520,21521,21524,21525,21568,21569,21572,\r\n                  21573,21584,21585,21588,21589,21760,21761,21764,21765,21776,21777,21780,21781,\r\n                  21824,21825,21828,21829,21840,21841,21844,21845 ]);\r\n        \r\n        this.jrll = new Int16Array([2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4]);\r\n        this.jpll = new Int16Array([ 1, 3, 5, 7, 0, 2, 4, 6, 1, 3, 5, 7]);\r\n        \r\n        this.xoffset = new Int16Array([ -1,-1, 0, 1, 1, 1, 0,-1 ]);\r\n        this.yoffset = new Int16Array([ 0, 1, 1, 1, 0,-1,-1,-1]);\r\n        this.facearray = [\r\n                        new Int16Array([8, 9,10,11,-1,-1,-1,-1,10,11, 8, 9]),// S\r\n                        new Int16Array([5, 6, 7, 4, 8, 9,10,11, 9,10,11, 8]),// SE\r\n                        new Int16Array([-1,-1,-1,-1, 5, 6, 7, 4,-1,-1,-1,-1]),// E\r\n                        new Int16Array([4, 5, 6, 7,11, 8, 9,10,11, 8, 9,10]), // SW\r\n                        new Int16Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11]),// center\r\n                        new Int16Array([1, 2, 3, 0, 0, 1, 2, 3, 5, 6, 7, 4]),// NE\r\n                        new Int16Array([-1,-1,-1,-1, 7, 4, 5, 6,-1,-1,-1,-1]),// W\r\n                        new Int16Array([3, 0, 1, 2, 3, 0, 1, 2, 4, 5, 6, 7]),// NW\r\n                        new Int16Array([2, 3, 0, 1,-1,-1,-1,-1, 0, 1, 2, 3])// N\r\n                        ];\r\n        // questo forse deve essere un UInt8Array. Viene usato da neighbours\r\n          this.swaparray = [\r\n                                      new Int16Array([ 0,0,3 ]),// S\r\n                                    new Int16Array([ 0,0,6 ]),// SE\r\n                                    new Int16Array([ 0,0,0 ]),// E\r\n                                    new Int16Array([ 0,0,5 ]), // SW\r\n                                    new Int16Array([ 0,0,0 ]),// center\r\n                                    new Int16Array([ 5,0,0 ]),// NE\r\n                                    new Int16Array([ 0,0,0 ]),// W\r\n                                    new Int16Array([ 6,0,0 ]),// NW\r\n                                    new Int16Array([ 3,0,0 ])// N\r\n                                    ];\r\n        if (nside_in <= this.ns_max && nside_in > 0){\r\n            this.nside = nside_in;\r\n            this.npface = this.nside*this.nside;\r\n            this.npix = 12*this.npface;\r\n            this.order = this.nside2order(this.nside);\r\n            this.nl2 = 2*this.nside;\r\n            this.nl3 = 3*this.nside;\r\n            this.nl4 = 4*this.nside;\r\n            this.fact2 = 4.0/this.npix;\r\n            this.fact1 = (this.nside<<1)*this.fact2;\r\n            this.ncap = 2*this.nside*(this.nside-1); // pixels in each polar cap\r\n    // console.log(\"order: \"+this.order);\r\n    // console.log(\"nside: \"+this.nside);\r\n            \r\n        }\r\n        \r\n        this.bn = [];\r\n        this.mpr = [];\r\n        this.cmpr = [];\r\n        this.smpr = [];\r\n        \r\n     // TODO INFINITE LOOP!!!!!! FIX ITTTTTTTTTT\r\n     // TODO INFINITE LOOP!!!!!! FIX ITTTTTTTTTT\r\n     // TODO INFINITE LOOP!!!!!! FIX ITTTTTTTTTT\r\n     // TODO INFINITE LOOP!!!!!! FIX ITTTTTTTTTT\r\n     // TODO INFINITE LOOP!!!!!! FIX ITTTTTTTTTT\r\n     // TODO INFINITE LOOP!!!!!! FIX ITTTTTTTTTT\r\n     // TODO INFINITE LOOP!!!!!! FIX ITTTTTTTTTT\r\n    // Uncaught RangeError: Maximum call stack size exceeded\r\n        // MOVED TO computeBn()\r\n//        for (let i=0; i <= this.order_max; ++i) {\r\n//        \tthis.bn[i]=new Healpix(1<<i);\r\n//        \tthis.mpr[i]=bn[i].maxPixrad();\r\n//        \tthis.cmpr[i]=Math.cos(mpr[i]);\r\n//        \tthis.smpr[i]=Math.sin(mpr[i]);\r\n//        }\r\n        \r\n    }\r\n    \r\n    \r\n    computeBn(): void{\r\n    \tfor (let i=0; i <= this.order_max; ++i) {\r\n        \tthis.bn[i] = new Healpix(1<<i);\r\n        \tthis.mpr[i] = this.bn[i].maxPixrad();\r\n        \tthis.cmpr[i] = Hploc.cos(this.mpr[i]);\r\n        \tthis.smpr[i] = Hploc.sin(this.mpr[i]);\r\n        }\r\n    }\r\n    \r\n    getNPix(): number{\r\n    \treturn this.npix;\r\n    };\r\n    \r\n    \r\n    getBoundaries(pix: number): Vec3[]{\r\n        let points = new Array<Vec3>(); \r\n        let xyf = this.nest2xyf(pix);\r\n    // console.log(\"PIXEL: \"+pix);\r\n    // console.log(\"XYF \"+xyf.ix+\" \"+xyf.iy+\" \"+xyf.face);\r\n        let dc=0.5/this.nside;\r\n        let xc=(xyf.ix+0.5)/this.nside; \r\n        let yc=(xyf.iy+0.5)/this.nside;\r\n        let d = 1.0/(this.nside);\r\n    // console.log(\"------------------------\");\r\n    // console.log(\"xc, yc, dc \"+xc+\",\"+ yc+\",\"+ dc);\r\n    // console.log(\"xc+dc-d, yc+dc, xyf.face, d \"+(xc+dc) +\",\"+ (yc+dc)+\",\"+\r\n\t// xyf.face+\",\"+ d);\r\n        points[0]=new Fxyf(xc+dc, yc+dc, xyf.face).toVec3();\r\n        points[1]=new Fxyf(xc-dc, yc+dc, xyf.face).toVec3();\r\n        points[2]=new Fxyf(xc-dc, yc-dc, xyf.face).toVec3();\r\n        points[3]=new Fxyf(xc+dc, yc-dc, xyf.face).toVec3();\r\n    // console.log(\"Points for npix: \"+pix);\r\n    // console.log(points);\r\n    // if (pix > 750){\r\n    // console.log(\"pix: \"+pix);\r\n    // console.log(\"dc: \"+dc);\r\n    // console.log(\"xyf.ix: \"+xyf.ix);\r\n    // console.log(\"xyf.iy: \"+xyf.iy);\r\n    // console.log(\"xc: \"+xc);\r\n    // console.log(\"yc: \"+yc);\r\n    // console.log(\"d: \"+d);\r\n    // }\r\n        return points;\r\n    };\r\n    \r\n    \r\n    /** Returns a set of points along the boundary of the given pixel.\r\n     * Step 1 gives 4 points on the corners. The first point corresponds\r\n     * to the northernmost corner, the subsequent points follow the pixel\r\n     * boundary through west, south and east corners.\r\n     *\r\n     * @param pix pixel index number\r\n     * @param step the number of returned points is 4*step\r\n     * @return {@link Vec3} for each point\r\n     */\r\n    getBoundariesWithStep(pix: number, step: number): Vec3[]{\r\n        // var points = new Array(); \r\n        let points = new Array<Vec3>(); \r\n        let xyf = this.nest2xyf(pix);\r\n        let dc=0.5/this.nside;\r\n        let xc=(xyf.ix+0.5)/this.nside; \r\n        let yc=(xyf.iy+0.5)/this.nside;\r\n        let d = 1.0/(this.nside * step);\r\n\r\n        for(let i = 0; i < step; i++){\r\n            points[i]=new Fxyf(xc+dc - i * d, yc+dc, xyf.face).toVec3();\r\n            points[i + step]=new Fxyf(xc-dc, yc+dc - i * d, xyf.face).toVec3();\r\n            points[i + 2 * step]=new Fxyf(xc-dc + i * d, yc-dc, xyf.face).toVec3();\r\n            points[i + 3 * step]=new Fxyf(xc+dc, yc-dc + i * d, xyf.face).toVec3();\r\n        }\r\n        return points;\r\n    };\r\n\r\n    getPointsForXyf(x: number, y: number, step: number, face: number): Vec3[]{\r\n        let nside = step * Math.pow(2, this.order);\r\n        let points = new Array<Vec3>();\r\n        let xyf = new Xyf(x , y , face);\r\n\r\n        let dc = 0.5 / nside;\r\n        let xc = (xyf.ix + 0.5) / nside;\r\n        let yc = (xyf.iy + 0.5) / nside;\r\n\r\n        points[0] = new Fxyf(xc + dc, yc + dc, xyf.face).toVec3();\r\n        points[1] = new Fxyf(xc - dc, yc + dc, xyf.face).toVec3();\r\n        points[2] = new Fxyf(xc - dc, yc - dc, xyf.face).toVec3();\r\n        points[3] = new Fxyf(xc + dc, yc - dc, xyf.face).toVec3();\r\n\r\n        return points;\r\n    }\r\n\r\n    /** Returns the neighboring pixels of ipix.\r\n    This method works in both RING and NEST schemes, but is\r\n    considerably faster in the NEST scheme.\r\n    @param ipix the requested pixel number.\r\n    @return array with indices of the neighboring pixels.\r\n      The returned array contains (in this order)\r\n      the pixel numbers of the SW, W, NW, N, NE, E, SE and S neighbor\r\n      of ipix. If a neighbor does not exist (this can only happen\r\n      for the W, N, E and S neighbors), its entry is set to -1. */\r\n    neighbours(ipix: number): Int32Array{\r\n        let result = new Int32Array(8);\r\n        let xyf = this.nest2xyf(ipix);\r\n        let ix = xyf.ix;\r\n        let iy=xyf.iy;\r\n        let face_num=xyf.face;\r\n    \r\n        var nsm1 = this.nside-1;\r\n        if ((ix>0)&&(ix<nsm1)&&(iy>0)&&(iy<nsm1)){\r\n            let fpix = Math.floor(face_num<<(2*this.order));\r\n            let px0 = this.spread_bits(ix  );\r\n            let py0 = this.spread_bits(iy  )<<1;\r\n            let pxp = this.spread_bits(ix+1);\r\n            let pyp = this.spread_bits(iy+1)<<1;\r\n            let pxm = this.spread_bits(ix-1);\r\n            let pym = this.spread_bits(iy-1)<<1;\r\n    \r\n            result[0] = fpix+pxm+py0; \r\n            result[1]=fpix+pxm+pyp;\r\n            result[2]=fpix+px0+pyp; \r\n            result[3]=fpix+pxp+pyp;\r\n            result[4]=fpix+pxp+py0; \r\n            result[5]=fpix+pxp+pym;\r\n            result[6]=fpix+px0+pym; \r\n            result[7]=fpix+pxm+pym;\r\n        }else{\r\n            for (let i=0; i< 8; ++i){\r\n                let x=ix+this.xoffset[i];\r\n                let y=iy+this.yoffset[i];\r\n                let nbnum=4;\r\n                if (x<0){ \r\n                    x+=this.nside; \r\n                    nbnum-=1; \r\n                }else if (x>=this.nside){ \r\n                    x-=this.nside; \r\n                    nbnum+=1; \r\n                }\r\n                if (y<0){ \r\n                    y+=this.nside; \r\n                    nbnum-=3; \r\n                }else if (y>=this.nside){ \r\n                    y-=this.nside; \r\n                    nbnum+=3; \r\n                }\r\n                \r\n                let f = this.facearray[nbnum][face_num];\r\n    \r\n                if (f>=0){\r\n                    let bits = this.swaparray[nbnum][face_num>>>2];\r\n                    if ((bits&1)>0){\r\n                        x=Math.floor(this.nside-x-1);\r\n                    }\r\n                    if ((bits&2)>0) {\r\n                        y=Math.floor(this.nside-y-1);\r\n                    }\r\n                    if ((bits&4)>0) { \r\n                        let tint=x; \r\n                        x=y; \r\n                        y=tint; \r\n                    }\r\n                    result[i] = this.xyf2nest(x,y,f);\r\n                }else{\r\n                    result[i]=-1;\r\n                }\t\t      \r\n            }\r\n        }\r\n        return result;\r\n    };\r\n\r\n\r\n    nside2order(nside: number): number {\r\n        return ((nside & (nside-1)) !=0 ) ? -1 : Math.log2(nside);\r\n    };\r\n    \r\n    nest2xyf(ipix: number): Xyf {\t\r\n        let pix=Math.floor(ipix&(this.npface-1));\r\n        let xyf = new Xyf  (this.compress_bits(pix), this.compress_bits(pix>>1),\r\n                Math.floor((ipix>>(2*this.order))));\r\n        return xyf;\r\n    };\r\n   \r\n    \r\n    xyf2nest(ix: number, iy: number, face_num: number): number {\r\n\r\n        return Math.floor(face_num<<(2*this.order)) \r\n        + this.spread_bits(ix) + (this.spread_bits(iy)<<1); \r\n    };\r\n    \r\n    loc2pix(hploc: Hploc): number{\r\n        let z=hploc.z;\r\n        let phi=hploc.phi;\r\n        \r\n        let za = Math.abs(z);\r\n        let tt = this.fmodulo((phi*this.inv_halfpi),4.0);// in [0,4)\r\n        let pixNo: number;\r\n        if (za<=this.twothird) {// Equatorial region\r\n            let temp1 = this.nside*(0.5+tt);\r\n            let temp2 = this.nside*(z*0.75);\r\n            let jp = Math.floor(temp1-temp2); // index of ascending edge line\r\n            let jm = Math.floor(temp1+temp2); // index of descending edge line\r\n            let ifp = Math.floor(jp >>> this.order);  // in {0,4}\r\n            let ifm = Math.floor(jm >>> this.order);\r\n            let face_num = Math.floor((ifp==ifm) ? (ifp|4) : ((ifp<ifm) ? ifp : (ifm+8)));\r\n            let ix = Math.floor(jm & (this.nside-1));\r\n            let iy = Math.floor(this.nside - (jp & (this.nside-1)) - 1);\r\n            pixNo = this.xyf2nest(ix, iy, face_num);\r\n        }else { // polar region, za > 2/3\r\n            let ntt = Math.min(3,Math.floor(tt));\r\n            let tp = tt-ntt;\r\n            let tmp = ((za<0.99)||(!hploc.have_sth)) ?\r\n                         this.nside*Math.sqrt(3*(1-za)) :\r\n                         this.nside*hploc.sth/Math.sqrt((1.0+za)/3.);\r\n            let jp = Math.floor(tp*tmp); // increasing edge line index\r\n            let jm = Math.floor((1.0-tp)*tmp); // decreasing edge line index\r\n            if (jp>=this.nside){\r\n                jp = this.nside-1; // for points too close to the boundary\r\n            }\r\n            if (jm>=this.nside){\r\n                jm = this.nside-1;\r\n            }\r\n\r\n            if (z>=0){\r\n                pixNo = this.xyf2nest(Math.floor(this.nside-jm -1),Math.floor(this.nside-jp-1),ntt);\r\n            }else{\r\n                pixNo = this.xyf2nest(Math.floor(jp), Math.floor(jm), ntt+8);\r\n            }\r\n            \r\n        }\r\n        return pixNo;\r\n    };\r\n    \r\n    \r\n    /** Returns the normalized 3-vector corresponding to the center of the\r\n    supplied pixel.\r\n    @param pix long the requested pixel number.\r\n    @return the pixel's center coordinates. */\r\n    pix2vec(pix: number): Vec3 { \r\n    \treturn this.pix2loc(pix).toVec3(); \r\n    };\r\n\r\n     /** Returns the Zphi corresponding to the center of the supplied pixel.\r\n      @param pix the requested pixel number.\r\n      @return the pixel's center coordinates. */\r\n    pix2zphi (pix: number): Zphi { \r\n        return this.pix2loc(pix).toZphi(); \r\n    }\r\n\r\n    \r\n    /**\r\n     * @param pix long\r\n     * @return Hploc\r\n     */\r\n    pix2loc (pix: number): Hploc{\r\n    \tlet loc = new Hploc(undefined);\r\n\r\n\r\n    \tlet xyf = this.nest2xyf(pix);\r\n\r\n      \tlet jr = ((this.jrll[xyf.face])<<this.order) -xyf.ix - xyf.iy - 1;\r\n\r\n      \tlet nr;\r\n      \tif (jr < this.nside) {\r\n      \t\tnr = jr;\r\n      \t\tlet tmp = (nr*nr)*this.fact2;\r\n      \t\tloc.z = 1 - tmp;\r\n      \t\tif (loc.z > 0.99) { \r\n      \t\t\tloc.sth = Math.sqrt(tmp * (2.-tmp)); \r\n      \t\t\tloc.have_sth = true; \r\n      \t\t}\r\n        } else if (jr>this.nl3) {\r\n        \tnr = this.nl4 - jr;\r\n        \tlet tmp = (nr * nr) * this.fact2;\r\n        \tloc.z = tmp - 1;\r\n        \tif (loc.z < -0.99) { \r\n        \t\tloc.sth=Math.sqrt(tmp * (2. - tmp)); \r\n        \t\tloc.have_sth = true; }\r\n        \t} else {\r\n        \t\tnr = this.nside;\r\n        \t\tloc.z = (this.nl2 - jr) * this.fact1;\r\n        }\r\n\r\n      \tlet tmp= (this.jpll[xyf.face]) * nr + xyf.ix - xyf.iy;\r\n//      \tassert(tmp<8*nr); // must not happen\r\n      \tif (tmp < 0) {\r\n      \t\ttmp += 8 * nr;\r\n      \t}\r\n      \tloc.phi = (nr == this.nside) ? 0.75 * Constants.halfpi * tmp * this.fact1 : (0.5 * Constants.halfpi * tmp)/nr;\r\n      \t// loc.setPhi((nr == this.nside) ? 0.75 * Constants.halfpi * tmp * this.fact1 : (0.5 * Constants.halfpi * tmp)/nr);\r\n      \treturn loc;\r\n    };\r\n    \r\n\r\n    ang2pix(ptg: Pointing, mirror?: boolean){\r\n        return this.loc2pix(new Hploc(ptg));\r\n    };\r\n    \r\n    fmodulo(v1: number, v2: number): number{\r\n        if (v1>=0){\r\n            return (v1<v2) ? v1 : v1%v2;\r\n        }\r\n        var tmp=v1%v2+v2;\r\n        return (tmp===v2) ? 0.0 : tmp;\r\n    };\r\n\r\n    compress_bits(v: number): number{\r\n        var raw        = Math.floor((v & 0x5555)) | Math.floor(((v & 0x55550000) >>> 15));\r\n        var compressed = this.ctab[raw & 0xff] | (this.\tctab[raw >>> 8] << 4);\r\n        return compressed;\r\n    };\r\n    \r\n    \r\n    spread_bits(v: number): number{\r\n        return Math.floor(this.utab[v & 0xff]) | Math.floor((this.utab[(v>>> 8)&0xff]<<16)) \r\n        | Math.floor((this.utab[(v>>>16)&0xff]<<32))| Math.floor((this.utab[(v>>>24)&0xff]<<48));\r\n    };\r\n    \r\n    \r\n    /**\r\n\t * Returns a range set of pixels that overlap with the convex polygon\r\n\t * defined by the {@code vertex} array.\r\n\t * <p>\r\n\t * This method is more efficient in the RING scheme.\r\n\t * <p>\r\n\t * This method may return some pixels which don't overlap with the polygon\r\n\t * at all. The higher {@code fact} is chosen, the fewer false positives are\r\n\t * returned, at the cost of increased run time.\r\n\t * \r\n\t * @param vertex\r\n\t *            an array containing the vertices of the requested convex\r\n\t *            polygon.\r\n\t * @param fact\r\n\t *            The overlapping test will be done at the resolution\r\n\t *            {@code fact*nside}. For NESTED ordering, {@code fact} must be\r\n\t *            a power of 2, else it can be any positive integer. A typical\r\n\t *            choice would be 4.\r\n\t * @return the requested set of pixel number ranges\r\n\t */\r\n    queryPolygonInclusive(vertex: Pointing[], fact: number): RangeSet{\r\n    \tlet inclusive = (fact!=0);\r\n        let nv=vertex.length;\r\n//        let ncirc = inclusive ? nv+1 : nv;\r\n\r\n        if (!(nv>=3)){\r\n    \t\tconsole.log(\"not enough vertices in polygon\");\r\n    \t\treturn;\r\n    \t}\r\n        let vv = new Array<Vec3>();\r\n        for (let i=0; i<nv; ++i){\r\n        \tvv[i] = Vec3.pointing2Vec3(vertex[i]);\r\n        } \r\n        \r\n        \r\n        let normal = new Array<Vec3>();\r\n        let flip=0;\r\n        let index = 0;\r\n        let back = false;\r\n\r\n        while (index < vv.length){\r\n        \t\r\n        \tlet first = vv[index];\r\n            let medium = null;\r\n            let last = null;\r\n            \r\n\t\t\tif (index == vv.length - 1) {\r\n\t\t\t\tlast = vv[1];\r\n\t\t\t\tmedium = vv[0];\r\n\t\t\t} else if (index == vv.length - 2) {\r\n\t\t\t\tlast = vv[0];\r\n\t\t\t\tmedium = vv[index + 1];\r\n\t\t\t} else {\r\n\t\t\t\tmedium = vv[index + 1];\r\n\t\t\t\tlast = vv[index + 2];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tnormal[index] = first.cross(medium).norm();\r\n\t\t\tlet hnd = normal[index].dot(last);\r\n        \t\r\n        \tif (index == 0) {\r\n\t\t\t\tflip = (hnd < 0.) ? -1 : 1;\r\n\r\n\t\t\t\tlet tmp = new Pointing(first); // TODO not used\r\n\t\t\t\tback = false;\r\n\t\t\t} else {\r\n\t\t\t\tlet flipThnd = flip * hnd;\r\n\t\t\t\tif (flipThnd < 0) {\r\n\t\t\t\t\tlet tmp = new Pointing(medium);\r\n\t\t\t\t\tvv.splice(index + 1, 1);\r\n\t\t\t\t\tnormal.splice(index, 1);\r\n\t\t\t\t\tback = true;\r\n\t\t\t\t\tindex -= 1;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet tmp = new Pointing(first);\r\n\t\t\t\t\tback = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\tnormal[index].scale(flip);\r\n\t\t\tindex += 1;\r\n        \t\r\n        }\r\n        nv=vv.length;\r\n        let ncirc = inclusive ? nv+1 : nv;\r\n\r\n        let rad = new Array(ncirc);\r\n        rad = rad.fill(Constants.halfpi);\r\n//        rad = rad.fill(1.5707963267948966);\r\n//        let p = \"1.5707963267948966\";\r\n//        rad = rad.fill(parseFloat(p));\r\n        \r\n        if (inclusive){\r\n        \tlet cf = new CircleFinder(vv);\r\n        \tnormal[nv] = cf.getCenter();\r\n        \trad[nv] = Hploc.acos(cf.getCosrad());\r\n        }\r\n        return this.queryMultiDisc(normal, rad, fact);\r\n\r\n    };\r\n    \r\n    /**\r\n\t * For NEST schema only\r\n\t * \r\n\t * @param normal:\r\n\t *            Vec3[]\r\n\t * @param rad:\r\n\t *            Float32Array\r\n\t * @param fact:\r\n\t *            The overlapping test will be done at the resolution\r\n\t *            {@code fact*nside}. For NESTED ordering, {@code fact} must be\r\n\t *            a power of 2, else it can be any positive integer. A typical\r\n\t *            choice would be 4.\r\n\t * @return RangeSet the requested set of pixel number ranges\r\n\t */\r\n    queryMultiDisc(norm: Vec3[], rad: number[], fact: number): RangeSet {\r\n    \tthis.computeBn();\r\n    \t\r\n    \tlet inclusive = (fact!=0);\r\n        let nv=norm.length;\r\n        // HealpixUtils.check(nv==rad.lengt0,\"inconsistent input arrays\");\r\n        if (!(nv==rad.length)){\r\n        \tconsole.error(\"inconsistent input arrays\");\r\n        \treturn;\r\n        }\r\n        \r\n        let res = new RangeSet(4<<1);\r\n        // Removed code for Scheme.RING\r\n        let oplus = 0;\r\n        if (inclusive) {\r\n\t\t\tif (!(Math.pow(2, this.order_max-this.order)>=fact)){\r\n\t\t\t\tconsole.error(\"invalid oversampling factor\");\r\n\t\t\t}\r\n\t\t\tif (!((fact&(fact-1))==0)){\r\n\t\t\t\tconsole.error(\"oversampling factor must be a power of 2\");\r\n\t\t\t}\r\n\r\n        \toplus = this.ilog2(fact);\r\n        \t\r\n        }\r\n        let omax = this.order + oplus; // the order up to which we test\r\n\r\n        // TODO: ignore all disks with radius>=pi\r\n\r\n//        let crlimit = new Float32Array[omax+1][nv][3];\r\n        let crlimit = new Array(omax+1);\r\n        let o: number;\r\n        let i: number;\r\n        for (o=0; o<=omax; ++o){ // prepare data at the required orders\r\n        \tcrlimit[o] = new Array(nv);\r\n        \tlet dr=this.bn[o].maxPixrad(); // safety distance\r\n            for (i=0; i<nv; ++i){\r\n            \t\r\n            \tcrlimit[o][i] = new Float64Array(3);\r\n            \tcrlimit[o][i][0] = (rad[i]+dr>Math.PI) ? -1: Hploc.cos(rad[i]+dr);\r\n            \tcrlimit[o][i][1] = (o==0) ? Hploc.cos(rad[i]) : crlimit[0][i][1];\r\n            \tcrlimit[o][i][2] = (rad[i]-dr<0.) ?  1. : Hploc.cos(rad[i]-dr);\r\n            }\r\n        }\r\n\r\n        let stk = new pstack(12 + 3 * omax);\r\n        for (let i=0; i<12; i++){ // insert the 12 base pixels in reverse\r\n\t\t\t\t\t\t\t\t\t// order\r\n        \tstk.push(11-i, 0);\r\n        }\r\n\r\n    \twhile (stk.size() > 0) { // as long as there are pixels on the stack\r\n            // pop current pixel number and order from the stack\r\n            let pix = stk.ptop();\r\n            let o = stk.otop();\r\n            stk.pop();\r\n\r\n            let pv = this.bn[o].pix2vec(pix);\r\n\r\n            let zone = 3;\r\n            for (let i=0; (i<nv)&&(zone>0); ++i) {\r\n            \tlet crad = pv.dot(norm[i]);\r\n            \tfor (let iz=0; iz<zone; ++iz){\r\n            \t\tif (crad < crlimit[o][i][iz]){\r\n            \t\t\tzone = iz;\t\r\n            \t\t}\r\n            \t}\r\n    \t\t}\r\n\r\n            if (zone>0) {\r\n            \tthis.check_pixel (o, omax, zone, res, pix, stk, inclusive);\r\n            }\r\n        }\r\n        return res;\r\n    };\r\n    \r\n    /** Integer base 2 logarithm.\r\n    @param arg\r\n    @return the largest integer {@code n} that fulfills {@code 2^n<=arg}.\r\n    For negative arguments and zero, 0 is returned. */\r\n    ilog2(arg: number): number{\r\n    \tlet max = Math.max(arg, 1);\r\n    \treturn 31-Math.clz32(max);\r\n    };\r\n    \r\n    /** Computes the cosine of the angular distance between two z, phi positions\r\n      on the unit sphere. */\r\n    cosdist_zphi (z1: number, phi1: number, z2: number, phi2: number): number {\r\n        return z1 * z2 + Hploc.cos(phi1-phi2) * Math.sqrt((1.0-z1*z1)*(1.0-z2*z2));\r\n    }\r\n    \r\n    /**\r\n     * @param int o\r\n     * @param int omax\r\n     * @param int zone\r\n     * @param RangeSet pixset\r\n     * @param long pix\r\n     * @param pstack stk\r\n     * @param boolean inclusive\r\n     */\r\n    check_pixel (o: number, omax: number, zone: number, pixset: RangeSet, pix: number, stk: pstack, inclusive: boolean) {\r\n    \t    \r\n    \tif (zone==0) return;\r\n\r\n\t    if (o<this.order) {\r\n\t    \tif (zone>=3) {// output all subpixels\r\n\t    \t\tlet sdist = 2 * (this.order-o); // the \"bit-shift distance\" between map orders\r\n    \t        pixset.append1(pix<<sdist,((pix+1)<<sdist));\r\n\t    \t}else {// (zone>=1)\r\n    \t        for (let i=0; i<4; ++i){\r\n    \t          stk.push(4*pix+3-i,o+1); // add children\r\n    \t        }\r\n\t    \t}\r\n\t    } else if (o>this.order) {// this implies that inclusive==true\r\n    \t      \r\n\t    \tif (zone>=2) {// pixel center in shape\r\n    \t        pixset.append(pix>>>(2*(o-this.order))); // output the parent pixel at order\r\n    \t        stk.popToMark(); // unwind the stack\r\n\t    \t} else {// (zone>=1): pixel center in safety range\r\n\t    \t\tif (o<omax) {// check sublevels\r\n\t    \t\t\tfor (let i=0; i<4; ++i){ // add children in reverse order\r\n\t    \t\t\t\tstk.push(4*pix+3-i,o+1); // add children\r\n\t    \t\t\t}\r\n\t    \t\t}else {// at resolution limit\r\n\t    \t\t\tpixset.append(pix>>>(2*(o-this.order)));// output the parent pixel at order\r\n\t    \t\t\tstk.popToMark(); // unwind the stack\r\n\t    \t\t}\r\n\t    \t}\r\n\t    } else {// o==order\r\n\t    \tif (zone>=2){\r\n    \t        pixset.append(pix);\r\n\t    \t} else if (inclusive) {// and (zone>=1)\r\n\t    \t\tif (this.order<omax) {// check sublevels\r\n\t    \t\t\tstk.mark(); // remember current stack position\r\n\t    \t\t\tfor (let i=0; i<4; ++i){ // add children in reverse order\r\n\t    \t\t\t\tstk.push(4*pix+3-i,o+1); // add children\r\n\t    \t\t\t}\r\n\t    \t\t} else {// at resolution limit\r\n    \t          pixset.append(pix); // output the pixel\r\n\t    \t\t}\r\n\t    \t}\r\n\t    }\r\n    }\r\n    \r\n    /** Returns the maximum angular distance between a pixel center and its\r\n    corners.\r\n    @return maximum angular distance between a pixel center and its\r\n      corners. */\r\n    maxPixrad() {\r\n    \t\r\n    \tlet zphia = new Zphi(2./3., Math.PI/this.nl4);\r\n    \tlet xyz1 = this.convertZphi2xyz(zphia);\r\n    \t\r\n    \tlet va = new Vec3(xyz1[0], xyz1[1], xyz1[2]);\r\n    \tlet t1 = 1.-1./this.nside;\r\n    \tt1*=t1;\r\n    \t\r\n    \t\r\n    \tlet zphib = new Zphi(1-t1/3, 0);\r\n    \tlet xyz2 = this.convertZphi2xyz(zphib);\r\n    \t\r\n    \tlet vb = new Vec3(xyz2[0], xyz2[1], xyz2[2]);\r\n    \treturn va.angle(vb);\r\n    };\r\n    \r\n    \r\n    \r\n    /**\r\n     * this is a workaround replacing the Vec3(Zphi) constructor.\r\n     */\r\n    convertZphi2xyz(zphi: Zphi): [number, number, number]{\r\n    \t\r\n    \tlet sth = Math.sqrt((1.0-zphi.z)*(1.0+zphi.z));\r\n        let x=sth*Hploc.cos(zphi.phi);\r\n        let y=sth*Hploc.sin(zphi.phi);\r\n        let z=zphi.z;\r\n        return [x, y, z];\r\n    \t\r\n    };\r\n\r\n    /** Returns a range set of pixels which overlap with a given disk. <p>\r\n      This method is more efficient in the RING scheme. <p>\r\n      This method may return some pixels which don't overlap with\r\n      the polygon at all. The higher {@code fact} is chosen, the fewer false\r\n      positives are returned, at the cost of increased run time.\r\n      @param ptg the angular coordinates of the disk center\r\n      @param radius the radius (in radians) of the disk\r\n      @param fact The overlapping test will be done at the resolution\r\n        {@code fact*nside}. For NESTED ordering, {@code fact} must be a power\r\n        of 2, else it can be any positive integer. A typical choice would be 4.\r\n      @return the requested set of pixel number ranges  */\r\n    queryDiscInclusive(ptg: Pointing, radius: number, fact: number): RangeSet {\r\n        this.computeBn();\r\n        let inclusive = (fact!=0);\r\n        let pixset = new RangeSet();\r\n\r\n        if (radius>=Math.PI) {// disk covers the whole sphere\r\n            pixset.append1(0, this.npix); return pixset; \r\n        }\r\n\r\n        let oplus=0;\r\n        if (inclusive) {\r\n            // HealpixUtils.check ((1L<<order_max)>=fact,\"invalid oversampling factor\");\r\n\r\n            if (! ((fact & (fact-1)) == 0) ) {\r\n                console.error(\"oversampling factor must be a power of 2\");\r\n            }\r\n            oplus = this.ilog2(fact);\r\n        }\r\n        \r\n        let omax = Math.min(this.order_max, this.order + oplus); // the order up to which we test\r\n        let vptg = Vec3.pointing2Vec3(ptg);\r\n        let crpdr = new Array(omax+1);\r\n        let crmdr = new Array(omax+1);\r\n\r\n        let cosrad = Hploc.cos(radius);\r\n        let sinrad = Hploc.sin(radius);\r\n        for (let o=0; o<=omax; o++) {// prepare data at the required orders\r\n      \r\n            let dr = this.mpr[o]; // safety distance\r\n            let cdr = this.cmpr[o];\r\n            let sdr = this.smpr[o];\r\n            crpdr[o] = (radius + dr > Math.PI) ? -1. : cosrad * cdr - sinrad * sdr;\r\n            crmdr[o] = (radius - dr < 0.)      ?  1. : cosrad * cdr + sinrad * sdr;\r\n        }\r\n\r\n        let stk = new pstack(12 + 3 * omax);\r\n        for (let i=0; i<12; i++) {// insert the 12 base pixels in reverse order\r\n            stk.push(11-i,0);\r\n        }\r\n\r\n        while (stk.size()>0) {// as long as there are pixels on the stack\r\n            // pop current pixel number and order from the stack\r\n            let pix = stk.ptop();\r\n            let curro = stk.otop();\r\n            stk.pop();\r\n\r\n            let pos = this.bn[curro].pix2zphi(pix);\r\n            // cosine of angular distance between pixel center and disk center\r\n            let cangdist = this.cosdist_zphi(vptg.z, ptg.phi, pos.z, pos.phi);\r\n\r\n            if (cangdist > crpdr[curro]) {\r\n                let zone = (cangdist<cosrad) ? 1 : ((cangdist<=crmdr[curro]) ? 2 : 3);\r\n                this.check_pixel (curro, omax, zone, pixset, pix, stk, inclusive);\r\n            }\r\n        }\r\n        return pixset;\r\n    }\r\n\r\n} \r\n\r\n// export default Healpix;\r\n// export {\r\n//     Hploc, \r\n//     Vec3,\r\n//     Pointing\r\n// };","import { Pointing } from './Pointing.js';\nimport {Vec3} from './Vec3.js';\nimport {Zphi} from './Zphi.js';\n\nexport class Hploc{\n\tstatic PI4_A = 0.7853981554508209228515625;\n\tstatic PI4_B = 0.794662735614792836713604629039764404296875e-8;\n\tstatic PI4_C = 0.306161699786838294306516483068750264552437361480769e-16;\n\tstatic M_1_PI = 0.3183098861837906715377675267450287;\n\t\n\tsth: number;\n\thave_sth: boolean;\n\tz: number;\n\t_phi: number;\n\n\n\tconstructor(ptg?: Pointing){\n\t\tHploc.PI4_A = 0.7853981554508209228515625;\n\t\tHploc.PI4_B = 0.794662735614792836713604629039764404296875e-8;\n\t\tHploc.PI4_C = 0.306161699786838294306516483068750264552437361480769e-16;\n\t\tHploc.M_1_PI = 0.3183098861837906715377675267450287;\n\t\tif ( ptg ){\n\t\t\tthis.sth = 0.0;\n\t\t\tthis.have_sth=false;\n\t\t\tthis.z = Hploc.cos(ptg.theta);\n\t\t\tthis._phi = ptg.phi;\n\t\t\tif (Math.abs(this.z)>0.99){\n\t\t\t\tthis.sth = Hploc.sin(ptg.theta);\n\t\t\t\tthis.have_sth=true;\n\t\t\t}\n\t\t}\n\t}\n\n\tsetZ(z: number){\n\t\tthis.z = z;\n\t};\n\t\n\tget phi(): number{\n\t\treturn this._phi;\n\t};\n\n\tset phi(phi: number){\n\t\tthis._phi = phi;\n\t};\n\n\tsetSth(sth: number){\n\t\tthis.sth = sth;\n\t};\n\t\n\ttoVec3(): Vec3{\n\t\tvar st = this.have_sth ? this.sth : Math.sqrt((1.0-this.z)*(1.0+this.z));\n\t\tvar vector = new Vec3(st*Hploc.cos(this.phi),st*Hploc.sin(this.phi),this.z);\n\t//\tvar vector = new Vec3(st*Math.cos(this.phi),st*Math.sin(this.phi),this.z);\n\t\treturn vector;\n\t};\n\n\ttoZphi(): Zphi { \n\t\treturn new Zphi(this.z, this.phi); \n\t}\n\n\t\n\tstatic sin(d: number): number{\n\t\t\n\t\tlet u = d * Hploc.M_1_PI;\n\t\tlet q = Math.floor(u < 0 ? u - 0.5 : u + 0.5);\n\t\tlet x = 4.0 * q;\n\t\td -= x * Hploc.PI4_A;\n\t\td -= x * Hploc.PI4_B;\n\t\td -= x * Hploc.PI4_C;\n\t\tif ((q & 1) != 0) {\n\t\t\td = -d;\n\t\t}\n\t\treturn this.sincoshelper(d);\n\t};\n\t\n\t\n\tstatic cos(d: number): number{\n\t\t\n//\t\tlet u = d * Hploc.M_1_PI - 0.5;\n\t\tlet u = d * Hploc.M_1_PI - 0.5;\n//\t\tu -= 0.5;\n\t\tlet q = 1 + 2 * Math.floor(u < 0 ? u - 0.5 : u + 0.5);\n\t\tlet x = 2.0 * q;\n\t\t\n\t\tlet t = x * Hploc.PI4_A;\n\t\td = d - t;\n\t\td -= x * Hploc.PI4_B;\n\t\td -= x * Hploc.PI4_C;\n\t\tif ((q & 2) == 0){\n\t\t\td = -d;\n\t\t}\n\t\treturn Hploc.sincoshelper(d);\n\t};\n\t\n\t\n\tstatic sincoshelper(d: number): number{\n\t\tlet s = d * d;\n\t\tlet u = -7.97255955009037868891952e-18;\n\t\tu = u * s +2.81009972710863200091251e-15;\n\t\tu = u * s -7.64712219118158833288484e-13;\n  \t\tu = u * s +1.60590430605664501629054e-10;\n  \t\tu = u * s -2.50521083763502045810755e-08;\n  \t\tu = u * s +2.75573192239198747630416e-06;\n  \t\tu = u * s -0.000198412698412696162806809;\n  \t\tu = u * s +0.00833333333333332974823815;\n  \t\tu = u * s -0.166666666666666657414808;\n\t\treturn s*u*d + d;\n\t};\n\t\n\t/** This method calculates the arc sine of x in radians. The return\n    value is in the range [-pi/2, pi/2]. The results may have\n    maximum error of 3 ulps. */\n\tstatic asin(d: number): number{ \n\t\treturn Hploc.mulsign(Hploc.atan2k(Math.abs(d), Math.sqrt((1+d)*(1-d))), d); \n\t};\n\t\n/** This method calculates the arc cosine of x in radians. The\n    return value is in the range [0, pi]. The results may have\n    maximum error of 3 ulps. */\n\tstatic acos(d: number): number {\n\t\treturn Hploc.mulsign(Hploc.atan2k(Math.sqrt((1+d)*(1-d)), Math.abs(d)), d) + (d<0 ? Math.PI : 0);\n\t};\n\t\n\tstatic mulsign(x: number, y: number): number{\n\t\tlet sign = Hploc.copySign(1, y);\n\t\treturn sign * x; \n\t};\n\t\n\tstatic copySign(magnitude: number, sign: number): number{\n\n\t\treturn sign < 0 ? -Math.abs(magnitude) : Math.abs(magnitude);\n\t\t// let finalsign = 1;\n\t\t// if (Object.is(finalsign , -0)){\n\t\t// \tsign = -1;\n\t\t// }else if (Object.is(finalsign , 0)){\n\t\t// \tsign = 1;\n\t\t// }else {\n\t\t// \tsign = Math.sign(finalsign);\n\t\t// }\n\t\t// return finalsign * magnitude;\n\t}\n\t\n\tstatic atanhelper(s: number): number{\n\t    let t = s * s;\n\t    let u = -1.88796008463073496563746e-05;\n\t    u = u * t + (0.000209850076645816976906797);\n\t    u = u * t + (-0.00110611831486672482563471);\n\t    u = u * t + (0.00370026744188713119232403);\n\t    u = u * t + (-0.00889896195887655491740809);\n\t    u = u * t + (0.016599329773529201970117);\n\t    u = u * t + (-0.0254517624932312641616861);\n\t    u = u * t + (0.0337852580001353069993897);\n\t    u = u * t + (-0.0407629191276836500001934);\n\t    u = u * t + (0.0466667150077840625632675);\n\t    u = u * t + (-0.0523674852303482457616113);\n\t    u = u * t + (0.0587666392926673580854313);\n\t    u = u * t + (-0.0666573579361080525984562);\n\t    u = u * t + (0.0769219538311769618355029);\n\t    u = u * t + (-0.090908995008245008229153);\n\t    u = u * t + (0.111111105648261418443745);\n\t    u = u * t + (-0.14285714266771329383765);\n\t    u = u * t + (0.199999999996591265594148);\n\t    u = u * t + (-0.333333333333311110369124);\n\t\n\t    return u * t * s + s;\n    };\n\n    static atan2k(y: number, x: number): number {\n\t    let q = 0.;\n\t\n\t    if (x < 0) { \n\t    \tx = -x; \n\t    \tq = -2.; \n\t    }\n\t    if (y > x) { \n\t    \tlet t = x; \n\t    \tx = y; \n\t    \ty = -t; \n\t    \tq += 1.; \n\t    }\n\t    return Hploc.atanhelper(y/x) + q*(Math.PI/2);\n    };\n\n /** This method calculates the arc tangent of y/x in radians, using\n the signs of the two arguments to determine the quadrant of the\n result. The results may have maximum error of 2 ulps. */\n\t static atan2(y: number, x: number): number {\n\t\t let r = Hploc.atan2k(Math.abs(y), x);\n\t\t\t\n\t\t r = Hploc.mulsign(r, x);\n\t\t if (Hploc.isinf(x) || x == 0){\n\t\t\t r = Math.PI/2 - (Hploc.isinf(x) ? (Hploc.copySign(1, x) * (Math.PI /2)) : 0);\n\t\t }\n\t      \n\t\t if (Hploc.isinf(y)){\n\t\t\t r = Math.PI/2 - (Hploc.isinf(x) ? (Hploc.copySign(1, x) * (Math.PI*1/4)) : 0);\n\t\t }\n\t\t\t      \n\t\t if (y == 0){\n\t\t\t r = (Hploc.copySign(1, x) == -1 ? Math.PI : 0);\n\t\t }\n\t\t return Hploc.isnan(x) || Hploc.isnan(y) ? NaN : Hploc.mulsign(r, y);\n\t };\n    \n\t /** Checks if the argument is a NaN or not. */\n\t static isnan(d: number): boolean {\n\t\t return d != d;\n\t };\n\n    /** Checks if the argument is either positive or negative infinity. */\n    static isinf(d:number): boolean{ \n    \treturn Math.abs(d) === +Infinity; \n    };\n\n\n}\n","import { Hploc } from './Hploc.js';\nimport { Vec3 } from './Vec3.js';\n\n\n\nexport class Pointing {\n\n\n\n\ttheta: number;\n\tphi: number;\n\n\t/**\n\t * \n\t * @param {*} vec3 Vec3.js\n\t * @param {*} mirror \n\t * @param {*} in_theta radians\n\t * @param {*} in_phi radians\n\t */\n\tconstructor(vec3: Vec3 | null, mirror?: boolean, in_theta?: number, in_phi?: number) {\n\n\t\tif (vec3 != null) {\n\t\t\tthis.theta = Hploc.atan2(Math.sqrt(vec3.x * vec3.x + vec3.y * vec3.y), vec3.z);\n\t\t\tif (mirror) {\n\t\t\t\tthis.phi = - Hploc.atan2(vec3.y, vec3.x);\n\t\t\t} else {\n\t\t\t\tthis.phi = Hploc.atan2(vec3.y, vec3.x);\n\t\t\t}\n\n\n\t\t\tif (this.phi < 0.0) {\n\t\t\t\tthis.phi = this.phi + 2 * Math.PI;\n\t\t\t}\n\t\t\tif (this.phi >= 2 * Math.PI) {\n\t\t\t\tthis.phi = this.phi - 2 * Math.PI;\n\t\t\t}\n\n\t\t} else {\n\t\t\tthis.theta = in_theta;\n\t\t\tthis.phi = in_phi;\n\t\t}\n\n\t}\n}\n\n","export class RangeSet{\n\t\n\tr: Int32Array;\n\tsz: number;\n\t/**\n\t * @param int cap: initial capacity\n\t */\n\tconstructor(cap?: number){\n\t\tif (cap<0) console.error(\"capacity must be positive\");\n\t    this.r = new Int32Array(cap<<1);\n\t    this.sz=0;\n\t};\n\t\n\t\n\t/** Append a single-value range to the object.\n    @param val value to append */\n\tappend (val: number): void { \n\t\tthis.append1(val,val+1); \n\t};\n\t\n\t\n\t /** Append a range to the object.\n    @param a first long in range\n    @param b one-after-last long in range */\n\tappend1 (a: number, b: number): void {\n\t\tif (a>=b) return;\n\t\tif ((this.sz>0) && (a<=this.r[this.sz-1])) {\n\t\t\tif (a<this.r[this.sz-2]) console.error(\"bad append operation\");\n\t\t\tif (b>this.r[this.sz-1]) this.r[this.sz-1]=b;\n\t\t\treturn;\n\t\t}\n\t\t// this.ensureCapacity(this.sz+2);\n\t\tlet cap = this.sz+2;\n\t\tif (this.r.length < cap) {\n\t\t\tlet newsize = Math.max( 2 * this.r.length,cap);\n\t\t\tlet rnew = new Int32Array(newsize);\n\t\t\trnew.set(this.r);\n\t\t\tthis.r = rnew;\n\t\t}\n\t\t\n\t\tthis.r[this.sz] = a;\n\t\tthis.r[this.sz+1] = b;\n\t\tthis.sz+=2;\n\t};\n\t\n\t/** Make sure the object can hold at least the given number of entries. \n\t * @param cap int\n\t * */\n  \tensureCapacity(cap: number): void { \n  \t\tif (this.r.length < cap) \n  \t\t\tthis.resize (Math.max( 2 * this.r.length,cap)); \n  \t};\n\t\n\t/**\n\t * @param newsize int\n\t */\n\tresize(newsize: number): void {\n\t\tif (newsize<this.sz)  console.error(\"requested array size too small\");\n\t\tif (newsize == this.r.length) return;\n\t\tlet rnew = new Int32Array(newsize);\n\t\tlet sliced = this.r.slice(0, this.sz + 1);\n//\t\tthis.arrayCopy(this.r, 0, rnew, 0, this.sz);\n\t\tthis.r = sliced;\n    };\n\t\n//\tarrayCopy(src, srcIndex, dest, destIndex, length) {\n//\t\tdest.splice(destIndex, length, ...src.slice(srcIndex, srcIndex + length));\n//\t};\n\n  \n  \n}\n\n","/**\n * Partial porting to Javascript of Vec3.java from Healpix3.30  \n */\n\nimport {Hploc} from './Hploc.js';\nimport {Pointing} from './Pointing.js';\n\n\nexport class Vec3{\n\t\n\tx: number;\n\ty: number;\n\tz: number;\n\t\n\tconstructor(in_x: number | Pointing, in_y: number, in_z: number){\n\n\t\tif (in_x instanceof Pointing) {\n\t\t\tlet ptg = in_x;\n\t\t\tlet sth = Hploc.sin(ptg.theta);\n\t\t\tthis.x=sth*Hploc.cos(ptg.phi);\n\t\t\tthis.y=sth*Hploc.sin(ptg.phi);\n\t\t\tthis.z=Hploc.cos(ptg.theta);\n\t\t}else{\n\t\t\tthis.x = in_x;\n\t\t\tthis.y = in_y;\n\t\t\tthis.z = in_z;\n\t\t}\n\t\t\n\t}\n\tgetX(): number{\n\t\t  return this.x;\n\t};\n\t\t\n\tgetY(): number{\n\t  return this.y;\n\t};\n\t\n\tgetZ(): number{\n\t  return this.z;\n\t};\n\t\n\t/** Scale the vector by a given factor\n    @param n the scale factor */\n\tscale(n: number): void{\n\t\tthis.x *= n; \n\t\tthis.y*=n; \n\t\tthis.z*=n;\n\t};\n\t\n\t/** Vector cross product.\n    @param v another vector\n    @return the vector cross product between this vector and {@code v} */\n\tcross(v: Vec3): Vec3 {\n\t\treturn new Vec3(this.y*v.z - v.y*this.z, this.z*v.x - v.z*this.x, this.x*v.y - v.x*this.y);\n\t};\n\t\n\t/** Vector addition\n\t    * @param v the vector to be added\n\t    * @return addition result */\n\tadd(v: Vec3): Vec3 {\n\t\treturn new Vec3(this.x+v.x, this.y+v.y, this.z+v.z); \n\t};\n\t\n\t/** Normalize the vector */\n\tnormalize(): void{\n\t    let d = 1./this.length();\n\t    this.x *= d; \n\t    this.y *= d; \n\t    this.z *= d;\n\t};\n\t\n\t/** Return normalized vector */\n\tnorm(): Vec3 {\n\t\tlet d = 1./this.length();\n\t\treturn new Vec3(this.x*d, this.y*d, this.z*d);\n\t};\n\t  \n\t/** Vector length\n    @return the length of the vector. */\n\tlength(): number{ \n\t\treturn Math.sqrt(this.lengthSquared()); \n\t};\n\n  /** Squared vector length\n      @return the squared length of the vector. */\n\tlengthSquared(): number{ \n\t\treturn this.x*this.x + this.y*this.y + this.z*this.z; \n  \t};\n  \t\n  \t/** Computes the dot product of the this vector and {@code v1}.\n     * @param v1 another vector\n     * @return dot product */\n  \tdot(v1: Vec3): number {\n\t   return this.x*v1.x + this.y*v1.y + this.z*v1.z; \n   \t};\n   \t\n   \t/** Vector subtraction\n     * @param v the vector to be subtracted\n     * @return subtraction result */\n   \tsub(v: Vec3): Vec3 {\n   \t\treturn new Vec3(this.x-v.x, this.y-v.y, this.z-v.z); \n   \t};\n\t\n   \n   \t\n   \t/** Angle between two vectors.\n    @param v1 another vector\n    @return the angle in radians between this vector and {@code v1};\n      constrained to the range [0,PI]. */\n   \tangle(v1: Vec3): number { \n   \t\treturn Hploc.atan2(this.cross(v1).length(), this.dot(v1)); \n   \t}\n   \t\n   \t/** Invert the signs of all components */\n    flip(): void { \n    \tthis.x *= -1.0;\n    \tthis.y *= -1.0;\n    \tthis.z *= -1.0;\n    }\n   \t\n   \tstatic pointing2Vec3(pointing: Pointing): Vec3{\n   \t\tlet sth = Hploc.sin(pointing.theta);\n   \t    let x = sth * Hploc.cos(pointing.phi);\n   \t    let y = sth * Hploc.sin(pointing.phi);\n   \t    let z = Hploc.cos(pointing.theta);\n   \t    return new Vec3(x, y, z);\n   \t    \n   \t};\n} \n\n","/**\n * Partial porting to Javascript of Xyf.java from Healpix3.30  \n */\nexport class Xyf{\n\n\tix: number;\n\tiy: number;\n\tface: number;\n\n\tconstructor(x: number, y: number, f: number){\n\t\tthis.ix = x;\n\t\tthis.iy = y;\n\t\tthis.face = f;\n\t}\n}\n\n\n","\nexport class Zphi{\n\t\n\tz: number;\n\tphi: number;\n\t\n\t/** Creation from individual components */\n\tconstructor(z_: number, phi_: number){\n    \tthis.z = z_; \n\t\tthis.phi = phi_; \n\t};\n\t\n}","export class pstack{\n\t\n\tp: number[];\n\to: Int32Array;\n\ts: number;\n\tm: number;\n\t\n\t/** Creation from individual components */\n\tconstructor(sz: number){\n    \tthis.p = new Array(sz); \n\t\tthis.o = new Int32Array(sz);\n\t\tthis.s = 0;\n\t\tthis.m = 0;\n\t};\n\t\n\t/**\n\t * @param p long\n\t * @param o int\n\t */\n\tpush (p_: number, o_: number){ \n\t\tthis.p[this.s]= p_; \n\t\tthis.o[this.s]= o_; \n\t\t++this.s;\n\t};\n\t\n  \tpop (){ \n  \t\t--this.s; \n  \t};\n  \n  \tpopToMark (){ \n  \t\tthis.s=this.m; \n  \t};\n  \n\tsize (){ \n\t\treturn this.s; \n\t};\n  \n\n\tmark (){ \n\t\tthis.m=this.s; \n\t};\n  \n\totop (){ \n\t\treturn this.o[this.s-1]; \n\t};\n  \n\tptop (){ \n\t\treturn this.p[this.s-1]; \n\t};\n\t\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export {Constants} from \"./Constants.js\";\nexport {pstack} from \"./pstack.js\";\nexport {CircleFinder} from './CircleFinder.js';\nexport {Fxyf} from './Fxyf.js';\nexport {Healpix} from './Healpix.js';\nexport {Pointing} from './Pointing.js';\nexport {RangeSet} from './RangeSet.js';\nexport {Vec3} from './Vec3.js';\nexport {Xyf} from './Xyf.js';\nexport {Zphi} from './Zphi.js';\nexport {Hploc} from './Hploc.js';"],"names":[],"sourceRoot":""}